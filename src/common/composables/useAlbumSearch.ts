import { Ref, ref, watch } from "vue";
import axios from "axios";
import { Album } from "../model/Album";

export function useAlbumSearch(query: Ref<string>) {
  const results = ref<Album[]>([]);
  const error = ref<Error>();
  const isLoading = ref(false);

  watch(query, async (query, _, onCleanup) => {
    if (!query) return;
    const ctrl = new AbortController();
    isLoading.value = true;
    try {
      const { data } = await axios.get("https://api.spotify.com/v1/search", {
        params: { type: "album", q: query },
        headers: {},
        signal: ctrl.signal,
      });
      results.value = data;
    } catch (e: unknown) {
      if (!axios.isAxiosError(e)) return (error.value = Error("Unknown Error"));
      
      if (!isSpotifyErrorResponse(e.response?.data)) return (error.value = Error("Unknown Error"));

      error.value = Error(e.response?.data.error.message);
      // if (e instanceof Error) error.value = e;
    } finally {
      isLoading.value = false;
    }

    onCleanup(() => ctrl.abort());
  });

  return { data: results, error, isLoading };
}

// Generated by https://quicktype.io

function isSpotifyErrorResponse(res: any): res is SpotifyErrorResponse {
  return res && "error" in res && "message" in res.error;
}

export interface SpotifyErrorResponse {
  error: {
    status: number;
    message: string;
  };
}

// export function useAlbumSearch(query: Ref<string>) {
//   const results = ref<Album[]>([]);

//   watch(query, async (query, _, onCleanup) => {
//     if (!query) return;

//     const ctrl = new AbortController();

//     const { data } = await axios.get("albums.json", { signal: ctrl.signal });
//     results.value = data;

//     onCleanup(() => ctrl.abort());
//   });

//   return { data: results };
// }
